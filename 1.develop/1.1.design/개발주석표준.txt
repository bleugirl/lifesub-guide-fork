주석 표준을 준수하면 코드의 유지보수성과 가독성이 향상되어 팀원 간의 협업이 원활해집니다.
코드 작성 시 아래 주석 표준을 준수해 주세요. 
---

**개발 주석 표준**

1. **주석의 목적 명확화**
   - **왜** 이 코드를 작성했는지, **어떻게** 동작하는지 설명합니다.
   - 복잡한 로직이나 특별한 의도가 있는 부분에 주석을 작성합니다.

2. **일관된 스타일 사용**
   - 팀 내에서 합의된 주석 스타일 가이드라인을 따릅니다.
   - 프로그래밍 언어별 표준 주석 문법을 사용합니다.

3. **명확하고 간결한 표현**
   - 간결한 문장으로 핵심을 전달합니다.
   - 이해하기 쉬운 언어와 용어를 사용합니다.

4. **코드와 주석의 동기화**
   - 코드 변경 시 관련 주석도 함께 업데이트합니다.
   - 오래되거나 불필요한 주석은 제거합니다.

5. **주석의 위치와 종류**
   - **파일 헤더 주석**: 파일의 목적, 작성자, 버전 정보를 포함합니다.
   - **클래스/모듈 주석**: 클래스나 모듈의 역할과 사용법을 설명합니다.
   - **메서드/함수 주석**: 기능, 입력 파라미터, 반환 값, 예외 사항을 기술합니다.
   - **인라인 주석**: 코드 내 특정 라인이나 블록에 대한 추가 설명이 필요할 때 사용합니다.

6. **표준화된 주석 태그 사용**
   - `@param`, `@return`, `@throws` 등의 태그를 활용하여 자동 문서화에 도움을 줍니다.
   - `TODO`, `FIXME` 등을 사용하여 향후 작업이나 수정 사항을 표시합니다.

7. **적절한 언어 사용**
   - 팀의 공용어를 사용하여 모든 팀원이 이해할 수 있게 합니다.
   - 전문적이고 예의 바른 표현을 사용하며, 비속어나 개인적인 의견은 피합니다.

8. **예제**

   ```java
   /**
    * 사용자 정보를 관리하는 클래스입니다.
    * 
    * @author
    * @version 1.0
    */
   public class UserManager {

       /**
        * 사용자 ID로 사용자 정보를 조회합니다.
        *
        * @param userId 조회할 사용자 ID
        * @return 사용자 객체를 반환합니다. 해당 ID의 사용자가 없으면 null을 반환합니다.
        * @throws IllegalArgumentException userId가 null이거나 빈 문자열인 경우
        */
       public User getUserById(String userId) throws IllegalArgumentException {
           // 입력된 사용자 ID의 유효성 검사
           if (userId == null || userId.isEmpty()) {
               throw new IllegalArgumentException("사용자 ID는 null이거나 빈 문자열일 수 없습니다.");
           }

           // TODO: 데이터베이스에서 사용자 정보를 조회하는 로직 구현 필요
           return null;
       }
   }
   ```

9. **자동 생성 주석의 활용**
   - IDE나 도구에서 자동으로 생성되는 주석은 필요에 따라 수정하거나 보완합니다.
   - 불필요한 자동 생성 주석은 제거하여 코드의 가독성을 높입니다.

10. **주석 작성 시 주의 사항**
    - 민감한 정보나 보안과 관련된 내용을 주석에 포함하지 않습니다.
    - 주석은 코드의 동작을 대체하지 않으며, 오히려 보완해야 합니다.